{"version":3,"sources":["generated/graphql.tsx","components/Launch/Launch.tsx","components/Launch/index.tsx","components/LaunchDetails/LaunchDetails.tsx","components/LaunchDetails/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CapsuleRange","LaunchRange","Order","CacheControlScope","LaunchListDocument","gql","LaunchProfileDocument","Launch","data","handleIdChange","className","launches","map","launch","i","key","onClick","flight_number","mission_name","launch_year","JSON","stringify","launch_success","LaunchContainer","props","baseOptions","Apollo","error","loading","LaunchDetails","rocket","rocket_name","launch_site","site_name","details","links","flickr_images","image","src","alt","LaunchDetailsContainer","id","variables","String","App","useState","setId","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ef744073.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The `Upload` scalar type represents a file upload. */\n  Upload: any;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  capsule?: Maybe<Capsule>;\n  capsules?: Maybe<Array<Maybe<Capsule>>>;\n  core?: Maybe<Core>;\n  cores?: Maybe<Array<Maybe<Core>>>;\n  dragon?: Maybe<Dragon>;\n  dragons?: Maybe<Array<Maybe<Dragon>>>;\n  history?: Maybe<Array<Maybe<History>>>;\n  info?: Maybe<Info>;\n  landingpad?: Maybe<Landingpad>;\n  landingpads?: Maybe<Array<Maybe<Landingpad>>>;\n  launch?: Maybe<Launch>;\n  launches?: Maybe<Array<Maybe<Launch>>>;\n  launchpad?: Maybe<Launchpad>;\n  launchpads?: Maybe<Array<Maybe<Launchpad>>>;\n  mission?: Maybe<Mission>;\n  missions?: Maybe<Array<Maybe<Mission>>>;\n  payload?: Maybe<Payload>;\n  payloads?: Maybe<Array<Maybe<Payload>>>;\n  roadster?: Maybe<Roadster>;\n  rocket?: Maybe<Rocket>;\n  rockets?: Maybe<Array<Maybe<Rocket>>>;\n  ship?: Maybe<Ship>;\n  ships?: Maybe<Array<Maybe<Ship>>>;\n};\n\n\nexport type QueryCapsuleArgs = {\n  capsule_serial: Scalars['String'];\n};\n\n\nexport type QueryCapsulesArgs = {\n  range?: Maybe<CapsuleRange>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<Order>;\n  sort?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryCoreArgs = {\n  core_serial: Scalars['String'];\n};\n\n\nexport type QueryCoresArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<Order>;\n  sort?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryDragonArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryDragonsArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryHistoryArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<Order>;\n  sort?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryLandingpadArgs = {\n  id?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryLandingpadsArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryLaunchArgs = {\n  id?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryLaunchesArgs = {\n  range?: Maybe<LaunchRange>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<Order>;\n  sort?: Maybe<Scalars['String']>;\n  ids?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\n\nexport type QueryLaunchpadArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryLaunchpadsArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryMissionArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryMissionsArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryPayloadArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryPayloadsArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<Order>;\n  sort?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryRocketArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryRocketsArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryShipArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryShipsArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<Order>;\n  sort?: Maybe<Scalars['String']>;\n};\n\nexport enum CapsuleRange {\n  Past = 'past',\n  Upcoming = 'upcoming'\n}\n\nexport enum LaunchRange {\n  Latest = 'latest',\n  Next = 'next',\n  Past = 'past',\n  Upcoming = 'upcoming'\n}\n\nexport enum Order {\n  Asc = 'asc',\n  Desc = 'desc'\n}\n\nexport type BasicMission = {\n  __typename?: 'BasicMission';\n  name?: Maybe<Scalars['String']>;\n  flight?: Maybe<Scalars['Int']>;\n};\n\nexport type Capsule = {\n  __typename?: 'Capsule';\n  capsule_serial?: Maybe<Scalars['String']>;\n  capsule_id?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  original_launch?: Maybe<Scalars['String']>;\n  original_launch_unix?: Maybe<Scalars['Float']>;\n  missions?: Maybe<Array<Maybe<BasicMission>>>;\n  landings?: Maybe<Scalars['Int']>;\n  type?: Maybe<Scalars['String']>;\n  details?: Maybe<Scalars['String']>;\n  reuse_count?: Maybe<Scalars['Int']>;\n};\n\nexport type Core = {\n  __typename?: 'Core';\n  core_serial?: Maybe<Scalars['String']>;\n  block?: Maybe<Scalars['Int']>;\n  status?: Maybe<Scalars['String']>;\n  original_launch?: Maybe<Scalars['String']>;\n  original_launch_unix?: Maybe<Scalars['Float']>;\n  missions?: Maybe<Array<Maybe<BasicMission>>>;\n  reuse_count?: Maybe<Scalars['Int']>;\n  rtls_attempts?: Maybe<Scalars['Int']>;\n  rtls_landings?: Maybe<Scalars['Int']>;\n  asds_attempts?: Maybe<Scalars['Int']>;\n  asds_landings?: Maybe<Scalars['Int']>;\n  water_landing?: Maybe<Scalars['Boolean']>;\n  details?: Maybe<Scalars['String']>;\n};\n\nexport type Dimension = {\n  __typename?: 'Dimension';\n  meters?: Maybe<Scalars['Float']>;\n  feet?: Maybe<Scalars['Float']>;\n};\n\nexport type Dragon = {\n  __typename?: 'Dragon';\n  id?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  type?: Maybe<Scalars['String']>;\n  active?: Maybe<Scalars['Boolean']>;\n  crew_capacity?: Maybe<Scalars['Int']>;\n  sidewall_angle_deg?: Maybe<Scalars['Int']>;\n  orbit_duration_yr?: Maybe<Scalars['Int']>;\n  dry_mass_kg?: Maybe<Scalars['Int']>;\n  dry_mass_lb?: Maybe<Scalars['Int']>;\n  first_flight?: Maybe<Scalars['String']>;\n  heat_shield?: Maybe<HeatShield>;\n  thrusters?: Maybe<Array<Maybe<Thruster>>>;\n  launch_payload_mass?: Maybe<Mass>;\n  launch_payload_vol?: Maybe<PayloadVolume>;\n  return_payload_mass?: Maybe<Mass>;\n  return_payload_vol?: Maybe<PayloadVolume>;\n  pressurized_capsule?: Maybe<PressurizedCapsule>;\n  trunk?: Maybe<Trunk>;\n  height_w_trunk?: Maybe<Dimension>;\n  diameter?: Maybe<Dimension>;\n  wikipedia?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n};\n\nexport type Engines = {\n  __typename?: 'Engines';\n  number?: Maybe<Scalars['Int']>;\n  type?: Maybe<Scalars['String']>;\n  version?: Maybe<Scalars['String']>;\n  layout?: Maybe<Scalars['String']>;\n  engine_loss_max?: Maybe<Scalars['Int']>;\n  propellant_1?: Maybe<Scalars['String']>;\n  propellant_2?: Maybe<Scalars['String']>;\n  thrust_sea_level?: Maybe<Thrust>;\n  thrust_vacuum?: Maybe<Thrust>;\n  thrust_to_weight?: Maybe<Scalars['Float']>;\n};\n\nexport type Fairing = {\n  __typename?: 'Fairing';\n  height?: Maybe<Dimension>;\n  diameter?: Maybe<Dimension>;\n};\n\nexport type Headquarters = {\n  __typename?: 'Headquarters';\n  address?: Maybe<Scalars['String']>;\n  city?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n};\n\nexport type HeatShield = {\n  __typename?: 'HeatShield';\n  material?: Maybe<Scalars['String']>;\n  size_meters?: Maybe<Scalars['Float']>;\n  temp_degrees?: Maybe<Scalars['Int']>;\n  dev_partner?: Maybe<Scalars['String']>;\n};\n\nexport type History = {\n  __typename?: 'History';\n  id?: Maybe<Scalars['Int']>;\n  title?: Maybe<Scalars['String']>;\n  event_date_utc?: Maybe<Scalars['String']>;\n  event_date_unix?: Maybe<Scalars['Float']>;\n  flight_number?: Maybe<Scalars['Int']>;\n  details?: Maybe<Scalars['String']>;\n  links?: Maybe<HistoryLinks>;\n};\n\nexport type HistoryLinks = {\n  __typename?: 'HistoryLinks';\n  article?: Maybe<Scalars['String']>;\n  reddit?: Maybe<Scalars['String']>;\n  wikipedia?: Maybe<Scalars['String']>;\n};\n\nexport type Info = {\n  __typename?: 'Info';\n  name?: Maybe<Scalars['String']>;\n  founder?: Maybe<Scalars['String']>;\n  founded?: Maybe<Scalars['Int']>;\n  employees?: Maybe<Scalars['Int']>;\n  vehicles?: Maybe<Scalars['Int']>;\n  launch_sites?: Maybe<Scalars['Int']>;\n  test_sites?: Maybe<Scalars['Int']>;\n  ceo?: Maybe<Scalars['String']>;\n  cto?: Maybe<Scalars['String']>;\n  coo?: Maybe<Scalars['String']>;\n  cto_propulsion?: Maybe<Scalars['String']>;\n  valuation?: Maybe<Scalars['Float']>;\n  headquarters?: Maybe<Headquarters>;\n  summary?: Maybe<Scalars['String']>;\n};\n\nexport type LandingLegs = {\n  __typename?: 'LandingLegs';\n  number?: Maybe<Scalars['Int']>;\n  material?: Maybe<Scalars['String']>;\n};\n\nexport type Landingpad = {\n  __typename?: 'Landingpad';\n  id?: Maybe<Scalars['String']>;\n  full_name?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  location?: Maybe<Location>;\n  landing_type?: Maybe<Scalars['String']>;\n  attempted_landings?: Maybe<Scalars['Int']>;\n  successful_landings?: Maybe<Scalars['Int']>;\n  wikipedia?: Maybe<Scalars['String']>;\n  details?: Maybe<Scalars['String']>;\n};\n\nexport type Launch = {\n  __typename?: 'Launch';\n  flight_number?: Maybe<Scalars['Int']>;\n  mission_id?: Maybe<Array<Maybe<Scalars['String']>>>;\n  mission_name?: Maybe<Scalars['String']>;\n  launch_year?: Maybe<Scalars['Int']>;\n  launch_date_unix?: Maybe<Scalars['Float']>;\n  launch_date_utc?: Maybe<Scalars['String']>;\n  launch_date_local?: Maybe<Scalars['String']>;\n  is_tentative?: Maybe<Scalars['Boolean']>;\n  tentative_max_precision?: Maybe<Scalars['String']>;\n  tbd?: Maybe<Scalars['Boolean']>;\n  launch_window?: Maybe<Scalars['Int']>;\n  rocket?: Maybe<LaunchRocket>;\n  ships?: Maybe<Array<Maybe<Scalars['String']>>>;\n  telemetry?: Maybe<LaunchTelemetry>;\n  launch_site?: Maybe<LaunchSite>;\n  launch_success?: Maybe<Scalars['Boolean']>;\n  links?: Maybe<LaunchLinks>;\n  details?: Maybe<Scalars['String']>;\n  upcoming?: Maybe<Scalars['Boolean']>;\n  static_fire_date_utc?: Maybe<Scalars['String']>;\n  static_fire_date_unix?: Maybe<Scalars['Float']>;\n  timeline?: Maybe<LaunchTimeline>;\n};\n\nexport type LaunchLinks = {\n  __typename?: 'LaunchLinks';\n  mission_patch?: Maybe<Scalars['String']>;\n  mission_patch_small?: Maybe<Scalars['String']>;\n  reddit_campaign?: Maybe<Scalars['String']>;\n  reddit_launch?: Maybe<Scalars['String']>;\n  reddit_recovery?: Maybe<Scalars['String']>;\n  reddit_media?: Maybe<Scalars['String']>;\n  presskit?: Maybe<Scalars['String']>;\n  article_link?: Maybe<Scalars['String']>;\n  wikipedia?: Maybe<Scalars['String']>;\n  video_link?: Maybe<Scalars['String']>;\n  youtube_id?: Maybe<Scalars['String']>;\n  flickr_images?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\nexport type Launchpad = {\n  __typename?: 'Launchpad';\n  id?: Maybe<Scalars['Int']>;\n  status?: Maybe<Scalars['String']>;\n  location?: Maybe<Location>;\n  vehicles_launched?: Maybe<Array<Maybe<Scalars['String']>>>;\n  attempted_launches?: Maybe<Scalars['Int']>;\n  successful_launches?: Maybe<Scalars['Int']>;\n  wikipedia?: Maybe<Scalars['String']>;\n  details?: Maybe<Scalars['String']>;\n  site_id?: Maybe<Scalars['String']>;\n  site_name_long?: Maybe<Scalars['String']>;\n};\n\nexport type LaunchRocket = {\n  __typename?: 'LaunchRocket';\n  rocket_id?: Maybe<Scalars['String']>;\n  rocket_name?: Maybe<Scalars['String']>;\n  rocket_type?: Maybe<Scalars['String']>;\n  first_stage?: Maybe<LaunchRocketFirstStage>;\n  second_stage?: Maybe<LaunchRocketSecondStage>;\n  fairings?: Maybe<LaunchRocketFairings>;\n};\n\nexport type LaunchRocketFairings = {\n  __typename?: 'LaunchRocketFairings';\n  reused?: Maybe<Scalars['Boolean']>;\n  recovery_attempt?: Maybe<Scalars['Boolean']>;\n  recovered?: Maybe<Scalars['Boolean']>;\n  ship?: Maybe<Scalars['String']>;\n};\n\nexport type LaunchRocketFirstStage = {\n  __typename?: 'LaunchRocketFirstStage';\n  cores?: Maybe<Array<Maybe<LaunchRocketFirstStageCore>>>;\n};\n\nexport type LaunchRocketFirstStageCore = {\n  __typename?: 'LaunchRocketFirstStageCore';\n  core_serial?: Maybe<Scalars['String']>;\n  flight?: Maybe<Scalars['Int']>;\n  block?: Maybe<Scalars['Int']>;\n  gridfins?: Maybe<Scalars['Boolean']>;\n  legs?: Maybe<Scalars['Boolean']>;\n  reused?: Maybe<Scalars['Boolean']>;\n  land_success?: Maybe<Scalars['Boolean']>;\n  landing_intent?: Maybe<Scalars['Boolean']>;\n  landing_type?: Maybe<Scalars['String']>;\n  landing_vehicle?: Maybe<Scalars['String']>;\n};\n\nexport type LaunchRocketSecondStage = {\n  __typename?: 'LaunchRocketSecondStage';\n  block?: Maybe<Scalars['Int']>;\n  payloads?: Maybe<Array<Maybe<Payload>>>;\n};\n\nexport type LaunchSite = {\n  __typename?: 'LaunchSite';\n  site_id?: Maybe<Scalars['String']>;\n  site_name?: Maybe<Scalars['String']>;\n  site_name_long?: Maybe<Scalars['String']>;\n};\n\nexport type LaunchTelemetry = {\n  __typename?: 'LaunchTelemetry';\n  flight_club?: Maybe<Scalars['String']>;\n};\n\nexport type LaunchTimeline = {\n  __typename?: 'LaunchTimeline';\n  webcast_liftoff?: Maybe<Scalars['Int']>;\n  go_for_prop_loading?: Maybe<Scalars['Int']>;\n  rp1_loading?: Maybe<Scalars['Int']>;\n  stage1_rp1_loading?: Maybe<Scalars['Int']>;\n  stage1_lox_loading?: Maybe<Scalars['Int']>;\n  stage2_rp1_loading?: Maybe<Scalars['Int']>;\n  stage2_lox_loading?: Maybe<Scalars['Int']>;\n  engine_chill?: Maybe<Scalars['Int']>;\n  prelaunch_checks?: Maybe<Scalars['Int']>;\n  propellant_pressurization?: Maybe<Scalars['Int']>;\n  go_for_launch?: Maybe<Scalars['Int']>;\n  ignition?: Maybe<Scalars['Int']>;\n  liftoff?: Maybe<Scalars['Int']>;\n  maxq?: Maybe<Scalars['Int']>;\n  beco?: Maybe<Scalars['Int']>;\n  side_core_sep?: Maybe<Scalars['Int']>;\n  side_core_boostback?: Maybe<Scalars['Int']>;\n  meco?: Maybe<Scalars['Int']>;\n  stage_sep?: Maybe<Scalars['Int']>;\n  center_stage_sep?: Maybe<Scalars['Int']>;\n  second_stage_ignition?: Maybe<Scalars['Int']>;\n  center_core_boostback?: Maybe<Scalars['Int']>;\n  fairing_deploy?: Maybe<Scalars['Int']>;\n  first_stage_entry_burn?: Maybe<Scalars['Int']>;\n  side_core_entry_burn?: Maybe<Scalars['Int']>;\n  center_core_entry_burn?: Maybe<Scalars['Int']>;\n  seco_1?: Maybe<Scalars['Int']>;\n  first_stage_landing_burn?: Maybe<Scalars['Int']>;\n  first_stage_landing?: Maybe<Scalars['Int']>;\n  side_core_landing?: Maybe<Scalars['Int']>;\n  center_core_landing?: Maybe<Scalars['Int']>;\n  second_stage_restart?: Maybe<Scalars['Int']>;\n  seco_2?: Maybe<Scalars['Int']>;\n  payload_deploy?: Maybe<Scalars['Int']>;\n  payload_deploy_1?: Maybe<Scalars['Int']>;\n  payload_deploy_2?: Maybe<Scalars['Int']>;\n  dragon_separation?: Maybe<Scalars['Int']>;\n  dragon_solar_deploy?: Maybe<Scalars['Int']>;\n  dragon_bay_door_deploy?: Maybe<Scalars['Int']>;\n};\n\nexport type Location = {\n  __typename?: 'Location';\n  name?: Maybe<Scalars['String']>;\n  region?: Maybe<Scalars['String']>;\n  latitude?: Maybe<Scalars['Float']>;\n  longitude?: Maybe<Scalars['Float']>;\n};\n\nexport type Mass = {\n  __typename?: 'Mass';\n  kg?: Maybe<Scalars['Int']>;\n  lb?: Maybe<Scalars['Int']>;\n};\n\nexport type Mission = {\n  __typename?: 'Mission';\n  mission_name?: Maybe<Scalars['String']>;\n  mission_id?: Maybe<Scalars['String']>;\n  manufacturers?: Maybe<Array<Maybe<Scalars['String']>>>;\n  payload_ids?: Maybe<Array<Maybe<Scalars['String']>>>;\n  wikipedia?: Maybe<Scalars['String']>;\n  website?: Maybe<Scalars['String']>;\n  twitter?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n};\n\nexport type Payload = {\n  __typename?: 'Payload';\n  payload_id?: Maybe<Scalars['String']>;\n  norad_id?: Maybe<Array<Maybe<Scalars['String']>>>;\n  cap_serial?: Maybe<Scalars['String']>;\n  reused?: Maybe<Scalars['Boolean']>;\n  customers?: Maybe<Array<Maybe<Scalars['String']>>>;\n  nationality?: Maybe<Scalars['String']>;\n  manufacturer?: Maybe<Scalars['String']>;\n  payload_type?: Maybe<Scalars['String']>;\n  payload_mass_kg?: Maybe<Scalars['Float']>;\n  payload_mass_lbs?: Maybe<Scalars['Float']>;\n  orbit?: Maybe<Scalars['String']>;\n  orbit_params?: Maybe<PayloadOrbitParams>;\n  mass_returned_kg?: Maybe<Scalars['Float']>;\n  mass_returned_lbs?: Maybe<Scalars['Float']>;\n  flight_time_sec?: Maybe<Scalars['Int']>;\n  cargo_manifest?: Maybe<Scalars['String']>;\n};\n\nexport type PayloadOrbitParams = {\n  __typename?: 'PayloadOrbitParams';\n  reference_system?: Maybe<Scalars['String']>;\n  regime?: Maybe<Scalars['String']>;\n  longitude?: Maybe<Scalars['Float']>;\n  semi_major_axis_km?: Maybe<Scalars['Float']>;\n  eccentricity?: Maybe<Scalars['Float']>;\n  periapsis_km?: Maybe<Scalars['Float']>;\n  apoapsis_km?: Maybe<Scalars['Float']>;\n  inclination_deg?: Maybe<Scalars['Float']>;\n  period_min?: Maybe<Scalars['Float']>;\n  lifespan_years?: Maybe<Scalars['Float']>;\n  epoch?: Maybe<Scalars['String']>;\n  mean_motion?: Maybe<Scalars['Float']>;\n  raan?: Maybe<Scalars['Float']>;\n  arg_of_pericenter?: Maybe<Scalars['Float']>;\n  mean_anomaly?: Maybe<Scalars['Float']>;\n};\n\nexport type PayloadVolume = {\n  __typename?: 'PayloadVolume';\n  cubic_meters?: Maybe<Scalars['Int']>;\n  cubic_feet?: Maybe<Scalars['Int']>;\n};\n\nexport type Position = {\n  __typename?: 'Position';\n  latitude?: Maybe<Scalars['Float']>;\n  longitude?: Maybe<Scalars['Float']>;\n};\n\nexport type PressurizedCapsule = {\n  __typename?: 'PressurizedCapsule';\n  payload_volume?: Maybe<PayloadVolume>;\n};\n\nexport type Roadster = {\n  __typename?: 'Roadster';\n  name: Scalars['String'];\n  launch_date_utc?: Maybe<Scalars['String']>;\n  launch_date_unix?: Maybe<Scalars['Float']>;\n  launch_mass_kg?: Maybe<Scalars['Int']>;\n  launch_mass_lbs?: Maybe<Scalars['Int']>;\n  norad_id?: Maybe<Scalars['Int']>;\n  epoch_jd?: Maybe<Scalars['Float']>;\n  orbit_type?: Maybe<Scalars['String']>;\n  apoapsis_au?: Maybe<Scalars['Float']>;\n  semi_major_axis_au?: Maybe<Scalars['Float']>;\n  eccentricity?: Maybe<Scalars['Float']>;\n  inclination?: Maybe<Scalars['Float']>;\n  longitude?: Maybe<Scalars['Float']>;\n  periapsis_arg?: Maybe<Scalars['Float']>;\n  period_days?: Maybe<Scalars['Float']>;\n  speed_kph?: Maybe<Scalars['Float']>;\n  speed_mph?: Maybe<Scalars['Float']>;\n  earth_distance_km?: Maybe<Scalars['Float']>;\n  earth_distance_mi?: Maybe<Scalars['Float']>;\n  mars_distance_km?: Maybe<Scalars['Float']>;\n  mars_distance_mi?: Maybe<Scalars['Float']>;\n  wikipedia?: Maybe<Scalars['String']>;\n  details?: Maybe<Scalars['String']>;\n};\n\nexport type Rocket = {\n  __typename?: 'Rocket';\n  id?: Maybe<Scalars['Int']>;\n  active?: Maybe<Scalars['Boolean']>;\n  stages?: Maybe<Scalars['Int']>;\n  boosters?: Maybe<Scalars['Int']>;\n  cost_per_launch?: Maybe<Scalars['Int']>;\n  success_rate_pct?: Maybe<Scalars['Float']>;\n  first_flight?: Maybe<Scalars['String']>;\n  country?: Maybe<Scalars['String']>;\n  company?: Maybe<Scalars['String']>;\n  height?: Maybe<Dimension>;\n  diameter?: Maybe<Dimension>;\n  mass?: Maybe<Mass>;\n  payload_weights?: Maybe<Array<Maybe<RocketPayloadWeight>>>;\n  first_stage?: Maybe<RocketFirstStage>;\n  second_stage?: Maybe<RocketSecondStage>;\n  engines?: Maybe<Engines>;\n  landing_legs?: Maybe<LandingLegs>;\n  flickr_images?: Maybe<Array<Maybe<Scalars['String']>>>;\n  wikipedia?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  rocket_id?: Maybe<Scalars['String']>;\n  rocket_name?: Maybe<Scalars['String']>;\n  rocket_type?: Maybe<Scalars['String']>;\n};\n\nexport type RocketFirstStage = {\n  __typename?: 'RocketFirstStage';\n  reusable?: Maybe<Scalars['Boolean']>;\n  engines?: Maybe<Scalars['Int']>;\n  fuel_amount_tons?: Maybe<Scalars['Float']>;\n  burn_time_sec?: Maybe<Scalars['Int']>;\n  thrust_sea_level?: Maybe<Thrust>;\n  thrust_vacuum?: Maybe<Thrust>;\n};\n\nexport type RocketPayload = {\n  __typename?: 'RocketPayload';\n  option_1?: Maybe<Scalars['String']>;\n  option_2?: Maybe<Scalars['String']>;\n  composite_fairing?: Maybe<Fairing>;\n};\n\nexport type RocketPayloadWeight = {\n  __typename?: 'RocketPayloadWeight';\n  id?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  kg?: Maybe<Scalars['Float']>;\n  lb?: Maybe<Scalars['Float']>;\n};\n\nexport type RocketSecondStage = {\n  __typename?: 'RocketSecondStage';\n  engines?: Maybe<Scalars['Int']>;\n  fuel_amount_tons?: Maybe<Scalars['Float']>;\n  burn_time_sec?: Maybe<Scalars['Int']>;\n  thrust?: Maybe<Thrust>;\n  payloads?: Maybe<RocketPayload>;\n};\n\nexport type Ship = {\n  __typename?: 'Ship';\n  ship_id?: Maybe<Scalars['String']>;\n  ship_name?: Maybe<Scalars['String']>;\n  ship_model?: Maybe<Scalars['String']>;\n  ship_type?: Maybe<Scalars['String']>;\n  roles?: Maybe<Array<Maybe<Scalars['String']>>>;\n  active?: Maybe<Scalars['Boolean']>;\n  imo?: Maybe<Scalars['Int']>;\n  mmsi?: Maybe<Scalars['Int']>;\n  abs?: Maybe<Scalars['Int']>;\n  class?: Maybe<Scalars['Int']>;\n  weight_lbs?: Maybe<Scalars['Float']>;\n  weight_kg?: Maybe<Scalars['Float']>;\n  year_built?: Maybe<Scalars['Int']>;\n  home_port?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  speed_kn?: Maybe<Scalars['Float']>;\n  course_deg?: Maybe<Scalars['Float']>;\n  position?: Maybe<Position>;\n  successful_landings?: Maybe<Scalars['Int']>;\n  attempted_landings?: Maybe<Scalars['Int']>;\n  missions?: Maybe<Array<Maybe<BasicMission>>>;\n  url?: Maybe<Scalars['String']>;\n  image?: Maybe<Scalars['String']>;\n};\n\nexport type Thrust = {\n  __typename?: 'Thrust';\n  kN?: Maybe<Scalars['Float']>;\n  lbf?: Maybe<Scalars['Float']>;\n};\n\nexport type Thruster = {\n  __typename?: 'Thruster';\n  type?: Maybe<Scalars['String']>;\n  amount?: Maybe<Scalars['Int']>;\n  pods?: Maybe<Scalars['Int']>;\n  fuel_1?: Maybe<Scalars['String']>;\n  fuel_2?: Maybe<Scalars['String']>;\n  thrust?: Maybe<Thrust>;\n};\n\nexport type Trunk = {\n  __typename?: 'Trunk';\n  trunk_volume?: Maybe<PayloadVolume>;\n  cargo?: Maybe<TrunkCargo>;\n};\n\nexport type TrunkCargo = {\n  __typename?: 'TrunkCargo';\n  solar_array?: Maybe<Scalars['Int']>;\n  unpressurized_cargo?: Maybe<Scalars['Boolean']>;\n};\n\nexport enum CacheControlScope {\n  Public = 'PUBLIC',\n  Private = 'PRIVATE'\n}\n\n\nexport type LaunchListQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type LaunchListQuery = (\n  { __typename?: 'Query' }\n  & { launches?: Maybe<Array<Maybe<(\n    { __typename?: 'Launch' }\n    & Pick<Launch, 'flight_number' | 'mission_name' | 'launch_year' | 'launch_success'>\n  )>>> }\n);\n\nexport type LaunchProfileQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type LaunchProfileQuery = (\n  { __typename?: 'Query' }\n  & { launch?: Maybe<(\n    { __typename?: 'Launch' }\n    & Pick<Launch, 'flight_number' | 'mission_name' | 'launch_year' | 'launch_success' | 'details'>\n    & { launch_site?: Maybe<(\n      { __typename?: 'LaunchSite' }\n      & Pick<LaunchSite, 'site_name'>\n    )>, rocket?: Maybe<(\n      { __typename?: 'LaunchRocket' }\n      & Pick<LaunchRocket, 'rocket_name' | 'rocket_type'>\n    )>, links?: Maybe<(\n      { __typename?: 'LaunchLinks' }\n      & Pick<LaunchLinks, 'flickr_images' | 'video_link'>\n    )> }\n  )> }\n);\n\n\nexport const LaunchListDocument = gql`\n    query LaunchList {\n  launches {\n    flight_number\n    mission_name\n    launch_year\n    launch_success\n  }\n}\n    `;\n\n/**\n * __useLaunchListQuery__\n *\n * To run a query within a React component, call `useLaunchListQuery` and pass it any options that fit your needs.\n * When your component renders, `useLaunchListQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useLaunchListQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useLaunchListQuery(baseOptions?: Apollo.QueryHookOptions<LaunchListQuery, LaunchListQueryVariables>) {\n        return Apollo.useQuery<LaunchListQuery, LaunchListQueryVariables>(LaunchListDocument, baseOptions);\n      }\nexport function useLaunchListLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<LaunchListQuery, LaunchListQueryVariables>) {\n          return Apollo.useLazyQuery<LaunchListQuery, LaunchListQueryVariables>(LaunchListDocument, baseOptions);\n        }\nexport type LaunchListQueryHookResult = ReturnType<typeof useLaunchListQuery>;\nexport type LaunchListLazyQueryHookResult = ReturnType<typeof useLaunchListLazyQuery>;\nexport type LaunchListQueryResult = Apollo.QueryResult<LaunchListQuery, LaunchListQueryVariables>;\nexport const LaunchProfileDocument = gql`\n    query LaunchProfile($id: String!) {\n  launch(id: $id) {\n    flight_number\n    mission_name\n    launch_year\n    launch_success\n    details\n    launch_site {\n      site_name\n    }\n    rocket {\n      rocket_name\n      rocket_type\n    }\n    links {\n      flickr_images\n      video_link\n    }\n  }\n}\n    `;\n\n/**\n * __useLaunchProfileQuery__\n *\n * To run a query within a React component, call `useLaunchProfileQuery` and pass it any options that fit your needs.\n * When your component renders, `useLaunchProfileQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useLaunchProfileQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useLaunchProfileQuery(baseOptions?: Apollo.QueryHookOptions<LaunchProfileQuery, LaunchProfileQueryVariables>) {\n        return Apollo.useQuery<LaunchProfileQuery, LaunchProfileQueryVariables>(LaunchProfileDocument, baseOptions);\n      }\nexport function useLaunchProfileLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<LaunchProfileQuery, LaunchProfileQueryVariables>) {\n          return Apollo.useLazyQuery<LaunchProfileQuery, LaunchProfileQueryVariables>(LaunchProfileDocument, baseOptions);\n        }\nexport type LaunchProfileQueryHookResult = ReturnType<typeof useLaunchProfileQuery>;\nexport type LaunchProfileLazyQueryHookResult = ReturnType<typeof useLaunchProfileLazyQuery>;\nexport type LaunchProfileQueryResult = Apollo.QueryResult<LaunchProfileQuery, LaunchProfileQueryVariables>;","import React from 'react'\nimport { LaunchListQuery } from '../../generated/graphql';\nimport './styles.css';\n\ninterface Props extends OwnProps {\n    data: LaunchListQuery;\n}\nexport interface OwnProps {\n    handleIdChange: (newid: number) => void;\n}\n\nconst Launch: React.FC<Props> = ({ data, handleIdChange }) => {\n    return (\n        <div className='Launches'>\n            <h3>All Spacex Launches</h3>\n            <ol className='Launches-list'>\n                {!!data.launches && data.launches.map(\n                    (launch, i) => !!launch && (\n                        <li key={i} className='Launches-item' onClick={() => handleIdChange(launch.flight_number!)} >\n                            Flight Number  -  {launch.flight_number}<br />\n                            <br />\n                            Mission Name - {launch.mission_name}<br />\n                            <br />\n                            Launch Year - { launch.launch_year}<br />\n                            <br />\n                            Launch Success - {JSON.stringify(launch.launch_success)}\n                        </li>\n                    )\n                )}\n            </ol>\n        </div>\n    )\n}\n\nexport default Launch","import React from 'react';\nimport { useLaunchListQuery } from '../../generated/graphql';\nimport Launch, { OwnProps } from './Launch';\n\n\nconst LaunchContainer = (props: OwnProps) => {\n    const { data, error, loading } = useLaunchListQuery();\n\n    if (loading) {\n        return <div><h1>Loading...</h1><br /></div>\n    }\n    if (error || !data) {\n        return <h1>Error found.?.?.</h1>\n    }\n\n    return <Launch data={data}  {...props} />\n};\n\nexport default LaunchContainer","import React from 'react'\nimport { LaunchProfileQuery } from '../../generated/graphql';\nimport './styles.css';\n\ninterface Props {\n    data: LaunchProfileQuery\n}\nconst LaunchDetails: React.FC<Props> = ({ data }) => {\n    if (!data.launch) {\n        return <h2>Launch unavailable</h2>\n    }\n    return (\n        <div className='launchDetails'>\n            <div className='launchDetailsStatus'>\n                <span>Flight No.  {data.launch.flight_number} </span>\n            </div>\n            <h1>\n                {data.launch.mission_name} - {data.launch.rocket?.rocket_name}\n            </h1>\n            <p>Launched from {data.launch.launch_site?.site_name} in {data.launch.launch_year}</p>\n            <p>{data.launch.details}</p>\n            {!!data.launch.links && !!data.launch.links.flickr_images && (\n                <div className='LaunchProfile__image-list' >\n                    {data.launch.links.flickr_images.map\n                        (\n                            image => image ? <img className='LaunchProfile__image' src={image} alt='launch mission images' /> : null\n                        )\n                    }\n                </div>\n            )}\n        </div>\n    )\n};\n\nexport default LaunchDetails;\n","import React from 'react';\nimport { useLaunchProfileQuery } from '../../generated/graphql';\nimport LaunchDetails from './LaunchDetails';\ninterface Props {\n    id: number;\n}\n\nconst LaunchDetailsContainer = ({ id }: Props) => {\n    const { data, error, loading } = useLaunchProfileQuery({ variables: { id: String(id) } });\n    if (loading) {\n        return <h1>Data is Loading...</h1>\n    }\n    if (error) {\n        return <h1>Error 404 .!.!</h1>\n    }\n    if (!data) {\n        return <h1>Please select a mission for it's details</h1>\n    }\n\n    return <LaunchDetails data={data} />\n}\n\nexport default LaunchDetailsContainer;","import React, { useState } from 'react';\nimport Launch from './components/Launch';\nimport LaunchDetails from './components/LaunchDetails';\nimport './App.css'\nconst App = () => {\n\n  const [id, setId] = useState(1);\n  const handleIdChange = () => {\n    setId(id + 1)\n  }\n  return (\n    <>\n      <div>\n        <button onClick={handleIdChange}>Change Flight:{id}</button>\n      </div>\n      <div className=\"App\">\n        <Launch handleIdChange={handleIdChange} />\n        <LaunchDetails id={id} />\n      </div>\n    </>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider, InMemoryCache, ApolloClient } from '@apollo/client';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst client = new ApolloClient({\n  uri: 'https://spacexdata.herokuapp.com/graphql',\n  cache: new InMemoryCache()\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>\n  , document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}